-- MySQL Script generated by MySQL Workbench
-- Tue Nov 24 18:47:49 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

DROP TABLE IF EXISTS `mydb`.`Surowce` ;
DROP TABLE IF EXISTS `mydb`.`Dostawcy` ;
DROP TABLE IF EXISTS `mydb`.`Klienci` ;
DROP TABLE IF EXISTS `mydb`.`Zamowienia` ;
DROP TABLE IF EXISTS `mydb`.`Pakowanie` ;
DROP TABLE IF EXISTS `mydb`.`Produkt` ;
DROP TABLE IF EXISTS `mydb`.`Partia` ;
DROP TABLE IF EXISTS `mydb`.`Pracownicy` ;
DROP TABLE IF EXISTS `mydb`.`PatrieJednegoZamowienia` ;
DROP TABLE IF EXISTS `mydb`.`Etat` ;
DROP TABLE IF EXISTS `mydb`.`Koszty` ;
DROP TABLE IF EXISTS `mydb`.`Zyski` ;
DROP TABLE IF EXISTS `mydb`.`Budzet` ;

DROP SCHEMA IF EXISTS `mydb` ;
-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Surowce`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Surowce` (
	`id_surowce` INT NOT NULL AUTO_INCREMENT,
	`nazwa` VARCHAR(45) NOT NULL,
	`Surowce_id_dostawcy` INT NOT NULL,
	`ilosc` FLOAT NOT NULL,
	`jednostka` VARCHAR(45) NOT NULL,
	PRIMARY KEY (`id_surowce`),
	INDEX `fk_Surowce_Dostawcy_idx` (`Surowce_id_dostawcy` ASC) VISIBLE,
	CONSTRAINT `fk_Surowce_Dostawcy1`
		FOREIGN KEY (`Surowce_id_dostawcy`)
			REFERENCES `mydb`.`Dostawcy` (`id_dostawcy`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Dostawcy`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `mydb`.`Dostawcy` (
	 `id_dostawcy` INT NOT NULL AUTO_INCREMENT,
	 `nazwa_dostawcy` VARCHAR(45) NULL,
	 `lokalizacja` VARCHAR(45) NULL,
	 `surowiec` VARCHAR(45) NOT NULL,
	 `cena` FLOAT NOT NULL,
	 `odleglosc` INT NOT NULL,
	 PRIMARY KEY (`id_dostawcy`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Klienci`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Klienci` (
	`id_klienci` INT NOT NULL AUTO_INCREMENT,
	`imie` VARCHAR(45) NOT NULL,
	`nazwisko` VARCHAR(45) NOT NULL,
	`nr_telefonu` VARCHAR(45) NOT NULL UNIQUE,
	`miasto` VARCHAR(45) NOT NULL,
	`adres` VARCHAR(45) NOT NULL,
	`email` VARCHAR(45) NOT NULL UNIQUE,
	`haslo` VARCHAR(45) NOT NULL,
	PRIMARY KEY (`id_klienci`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Zamowienia`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Zamowienia` (
   `idZamowienia` INT NOT NULL AUTO_INCREMENT,
   `Klienci_id_klienci` INT NOT NULL,
   `data_zamowienia` DATE NOT NULL,
   `data_nadania` DATE NULL,
   `status` VARCHAR(45) NOT NULL,
   PRIMARY KEY (`idZamowienia`),
   INDEX `fk_Zamowienia_Klienci1_idx` (`Klienci_id_klienci` ASC) VISIBLE,
   CONSTRAINT `fk_Zamowienia_Klienci1`
	   FOREIGN KEY (`Klienci_id_klienci`)
		   REFERENCES `mydb`.`Klienci` (`id_klienci`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Pakowanie`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Pakowanie` (
	  `id_pakowanie` INT NOT NULL AUTO_INCREMENT,
	  `nazwa_pakietu` VARCHAR(45) NOT NULL,
	  `liczba_sztuk` INT NOT NULL,
	  PRIMARY KEY (`id_pakowanie`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Produkt`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Produkt` (
	`idProdukt` INT NOT NULL AUTO_INCREMENT,
	`nazwa_produktu` VARCHAR(45) NOT NULL,
	`cena_sztuka` FLOAT NOT NULL,
	PRIMARY KEY (`idProdukt`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Partia`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Partia` (
   `id_partii` INT NOT NULL AUTO_INCREMENT,
   `Produkt_idProdukt` INT NOT NULL,
   `Pakowanie_id_pakowanie` INT NOT NULL,
   `cena` FLOAT NOT NULL,
   `stan` VARCHAR(45) NULL,
   PRIMARY KEY (`id_partii`),
   INDEX `fk_Produkty_Pakowanie_idx` (`Pakowanie_id_pakowanie` ASC) VISIBLE,
   INDEX `fk_Partia_Produkt1_idx` (`Produkt_idProdukt` ASC) VISIBLE,
   CONSTRAINT `fk_Produkty_Pakowanie`
	   FOREIGN KEY (`Pakowanie_id_pakowanie`)
		   REFERENCES `mydb`.`Pakowanie` (`id_pakowanie`),
   CONSTRAINT `fk_Partia_Produkt1`
	   FOREIGN KEY (`Produkt_idProdukt`)
		   REFERENCES `mydb`.`Produkt` (`idProdukt`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Pracownicy`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Pracownicy` (
   `id_pracownicy` INT NOT NULL AUTO_INCREMENT,
   `imie` VARCHAR(45) NOT NULL,
   `nazwisko` VARCHAR(45) NOT NULL,
   `nr_telefonu` VARCHAR(45) NULL UNIQUE,
   `uprawnienia` VARCHAR(45) NULL,
   `pracownik` TINYINT NULL,
   `stawka` INT NOT NULL,
   `email` VARCHAR(45) NOT NULL UNIQUE,
   `haslo` VARCHAR(45) NOT NULL,
   PRIMARY KEY (`id_pracownicy`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PatrieJednegoZamowienia`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`PatrieJednegoZamowienia` (
	`Zamowienia_idZamowienia` INT NOT NULL,
	`Partia_id_partii` INT NOT NULL,
	`ilosc` INT NOT NULL,
	PRIMARY KEY (`Zamowienia_idZamowienia`, `Partia_id_partii`),
	INDEX `fk_Zamowienie_Produkty1_idx` (`Partia_id_partii` ASC) VISIBLE,
	INDEX `fk_PatrieJednegoZamowienia_Zamowienia1_idx` (`Zamowienia_idZamowienia` ASC) VISIBLE,
	CONSTRAINT `fk_Zamowienie_Produkty1`
		FOREIGN KEY (`Partia_id_partii`)
			REFERENCES `mydb`.`Partia` (`id_partii`),
	CONSTRAINT `fk_PatrieJednegoZamowienia_Zamowienia1`
		FOREIGN KEY (`Zamowienia_idZamowienia`)
			REFERENCES `mydb`.`Zamowienia` (`idZamowienia`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Etat`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Etat` (
	 `id_etat` INT NOT NULL AUTO_INCREMENT,
	 `Pracownicy_id_pracownicy` INT NOT NULL,
	 `liczba_godzin` INT NOT NULL,
	 PRIMARY KEY (`id_etat`, `Pracownicy_id_pracownicy`),
	 INDEX `fk_Etat_Pracownicy1_idx` (`Pracownicy_id_pracownicy` ASC) VISIBLE,
	 CONSTRAINT `fk_Etat_Pracownicy1`
		 FOREIGN KEY (`Pracownicy_id_pracownicy`)
			 REFERENCES `mydb`.`Pracownicy` (`id_pracownicy`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Koszty`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Koszty` (
   `id_koszty` INT NOT NULL AUTO_INCREMENT,
   `pensje` INT NULL,
   `surowce` FLOAT NULL,
   `Etat_id_etat` INT NULL,
   `Surowce_id_surowce` INT NULL,
   PRIMARY KEY (`id_koszty`),
   INDEX `fk_Koszty_Etat1_idx` (`Etat_id_etat` ASC) VISIBLE,
   INDEX `fk_Koszty_Surowce1_idx` (`Surowce_id_surowce` ASC) VISIBLE,
   CONSTRAINT `fk_Koszty_Etat1`
	   FOREIGN KEY (`Etat_id_etat`)
		   REFERENCES `mydb`.`Etat` (`id_etat`),
   CONSTRAINT `fk_Koszty_Surowce1`
	   FOREIGN KEY (`Surowce_id_surowce`)
		   REFERENCES `mydb`.`Surowce` (`id_surowce`))
    ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Zyski`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Zyski` (
	  `id_zyski` INT NOT NULL AUTO_INCREMENT,
	  `Zamowienia_idZamowienia` INT NOT NULL,
	  `kwota` INT NOT NULL,
	  PRIMARY KEY (`id_zyski`),
	  INDEX `fk_Zyski_Zamowienia1_idx` (`Zamowienia_idZamowienia` ASC) VISIBLE,
	  CONSTRAINT `fk_Zyski_Zamowienia1`
		  FOREIGN KEY (`Zamowienia_idZamowienia`)
			  REFERENCES `mydb`.`Zamowienia` (`idZamowienia`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Budzet`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `mydb`.`Budzet` (
   `id_budzet` INT NOT NULL AUTO_INCREMENT,
   `Koszty_id_koszty` INT NULL,
   `straty` FLOAT NULL,
   `Zyski_id_zyski` INT NULL,
   `zyski` FLOAT NULL,
   PRIMARY KEY (`id_budzet`),
   INDEX `fk_Budzet_Koszty1_idx` (`Koszty_id_koszty` ASC) VISIBLE,
   INDEX `fk_Budzet_Zyski1_idx` (`Zyski_id_zyski` ASC) VISIBLE,
   CONSTRAINT `fk_Budzet_Koszty1`
	   FOREIGN KEY (`Koszty_id_koszty`)
		   REFERENCES `mydb`.`Koszty` (`id_koszty`),
   CONSTRAINT `fk_Budzet_Zyski1`
	   FOREIGN KEY (`Zyski_id_zyski`)
		   REFERENCES `mydb`.`Zyski` (`id_zyski`))
    ENGINE = InnoDB;

drop trigger if exists UPDATE_KOSZTY_PENSJE_PO_DODANIU;
drop procedure if exists UPDATE_KOSZTY_PENSJE_PROC_PO_DODANIU;
drop trigger if exists UPDATE_KOSZTY_PENSJE;
drop procedure if exists UPDATE_KOSZTY_PENSJE_PROC;
drop trigger if exists UPDATE_BUDZET_KOSZTA_PO_DODANIU;
drop procedure if exists PDATE_BUDZET_KOSZTA_PROC_PO_DODANIU;
drop trigger if exists UPDATE_BUDZET_KOSZTA;
drop procedure if exists UPDATE_BUDZET_KOSZTA_PROC;
drop trigger if exists UPDATE_BUDZET_ZYSKI_PO_DODANIU;
drop procedure if exists UPDATE_BUDZET_ZYSKI_PROC_PO_DODANIU;
drop trigger if exists UPDATE_BUDZET_ZYSKI;
drop procedure if exists UPDATE_BUDZET_ZYSKI_PROC;
drop procedure if exists UPDATE_KOSZTY_PROC;
drop trigger if exists UPDATE_KOSZTY_SUROWCE_PO_DODANIU;
drop procedure if exists UPDATE_KOSZTY_PROC_PO_DODANIU;
drop trigger if exists SET_PARTIA_PRICE;
drop procedure if exists SET_PRICE_PARTIA_PROC;



DELIMITER $$
CREATE TRIGGER `UPDATE_KOSZTY_PENSJE_PO_DODANIU`
    AFTER INSERT ON etat
    FOR EACH ROW
BEGIN
    SET @idEt = new.id_etat;
    SET @godz = new.liczba_godzin;
    SET @pracownik = new.Pracownicy_id_pracownicy;
    CALL UPDATE_KOSZTY_PENSJE_PROC_PO_DODANIU(@pracownik, @godz, @pensja);
    INSERT INTO `mydb`.`koszty`(`pensje`,`surowce`,`Etat_id_etat`,`Surowce_id_surowce`)VALUES(@pensja,null,@idEt,null);
end;

CREATE PROCEDURE `UPDATE_KOSZTY_PENSJE_PROC_PO_DODANIU`(IN pracownik INT,IN godz INT, OUT pensja INT)
BEGIN
    SET pensja = (SELECT stawka FROM Pracownicy p WHERE p.id_pracownicy = pracownik) * godz;
end;
$$

DELIMITER $$
CREATE TRIGGER `UPDATE_KOSZTY_PENSJE`
    AFTER UPDATE ON etat
    FOR EACH ROW
BEGIN
    SET @idEt = new.id_etat;
    SET @godz = new.liczba_godzin;
    SET @pracownik = new.Pracownicy_id_pracownicy;
    CALL UPDATE_KOSZTY_PENSJE_PROC(@godz, @pracownik, @pensja);
    UPDATE `mydb`.`Koszty`
    SET pensje = @pensja
    WHERE Etat_id_etat = @idEt;
end;

CREATE PROCEDURE `UPDATE_KOSZTY_PENSJE_PROC`(IN godziny INT,IN id_prac INT, OUT pensja INT)
BEGIN
    SET pensja = (SELECT stawka FROM Pracownicy p WHERE p.id_pracownicy = id_prac) * godziny;
end;
$$

DELIMITER $$
CREATE TRIGGER `UPDATE_BUDZET_KOSZTA_PO_DODANIU`
    AFTER INSERT ON koszty
    FOR EACH ROW
BEGIN
    SET @idKoszt = new.id_koszty;
    SET @pensja = new.pensje;
    SET @strata = new.surowce;
    CALL UPDATE_BUDZET_KOSZTA_PROC_PO_DODANIU(@idKoszt, @pensja, @strata);
end;

CREATE PROCEDURE `UPDATE_BUDZET_KOSZTA_PROC_PO_DODANIU`(id_koszt INT, pensja INT, strata INT)
BEGIN
    IF(pensja = NULL) THEN
        INSERT INTO `mydb`.`budzet`(`Koszty_id_koszty`,`straty`)VALUES(id_koszt,strata);
    ELSE
        INSERT INTO `mydb`.`budzet`(`Koszty_id_koszty`,`straty`)VALUES(id_koszt,pensja);
    END IF;
end;
$$

DELIMITER $$
CREATE TRIGGER `UPDATE_BUDZET_KOSZTA`
    AFTER UPDATE ON koszty
    FOR EACH ROW
BEGIN
    SET @idKoszt = new.id_koszty;
    SET @pensja = new.pensje;
    SET @strata = new.surowce;
    CALL UPDATE_BUDZET_KOSZTA_PROC(@idKoszt, @pensja, @strata);
end;

CREATE PROCEDURE `UPDATE_BUDZET_KOSZTA_PROC`(idKoszt INT, pensja INT, strata INT)
BEGIN
    IF(pensja = NULL) THEN
        UPDATE `mydb`.`budzet`
        SET straty = strata
        WHERE Koszty_id_koszty = idKoszt;
    ELSE
        UPDATE `mydb`.`budzet`
        SET straty = pensja
        WHERE Koszty_id_koszty = idKoszt;
    END IF;
end;
$$

-- --------------------------------------------------------
DELIMITER $$
CREATE TRIGGER `UPDATE_BUDZET_ZYSKI_PO_DODANIU`
    AFTER INSERT ON zyski
    FOR EACH ROW
BEGIN
    SET @idZysk = new.id_zyski;
    SET @zysk = new.kwota;
    CALL UPDATE_BUDZET_ZYSKI_PROC_PO_DODANIU(@idZysk, @zysk);
end;

CREATE PROCEDURE `UPDATE_BUDZET_ZYSKI_PROC_PO_DODANIU`(id_zysk INT, zysk INT)
BEGIN
    INSERT INTO `mydb`.`budzet`(`Zyski_id_zyski`,`zyski`)VALUES(id_zysk,zysk);
end;
$$

DELIMITER $$
CREATE TRIGGER `UPDATE_BUDZET_ZYSKI`
    AFTER UPDATE ON zyski
    FOR EACH ROW
BEGIN
    SET @idZysk = new.id_zyski;
    SET @zysk = new.kwota;
    CALL UPDATE_BUDZET_ZYSKI_PROC(@idZysk, @zysk);
end;

CREATE PROCEDURE `UPDATE_BUDZET_ZYSKI_PROC`(idZysk INT, zysk INT)
BEGIN
    UPDATE `mydb`.`budzet`
    SET zyski = zysk
    WHERE Zyski_id_zyski = idZysk;
end;
$$
-- ----------------------------------------------------------------------



DELIMITER $$
CREATE TRIGGER `UPDATE_KOSZTY_SUROWCE_PO_DODANIU`
    AFTER INSERT ON surowce
    FOR EACH ROW
BEGIN
    SET @idSur = new.id_surowce;
    SET @idDost = new.Surowce_id_dostawcy;
    CALL UPDATE_KOSZTY_PROC_PO_DODANIU(@idSur, @idDost, @koszt);
    INSERT INTO `mydb`.`koszty`(`surowce`,`Surowce_id_surowce`)VALUES(@koszt, @idSur);
end;

CREATE PROCEDURE `UPDATE_KOSZTY_PROC_PO_DODANIU`(IN id_sur INT, IN id_dost INT, OUT koszt FLOAT)
BEGIN
    SET koszt = (SELECT ilosc FROM surowce WHERE id_surowce = id_sur) * (SELECT cena FROM dostawcy WHERE id_dostawcy = id_dost);
end;
$$


DELIMITER $$
CREATE TRIGGER `SET_PARTIA_PRICE`
    BEFORE INSERT ON PARTIA
    FOR EACH ROW
BEGIN
    SET @partia = new.id_partii;
    SET @id_Produkt = new.Produkt_idProdukt;
    SET @id_pakowanie = new.Pakowanie_id_pakowanie;
    call SET_PRICE_PARTIA_PROC(@id_Produkt, @id_pakowanie, @cena);
    SET new.cena = @cena;

end;

CREATE PROCEDURE `SET_PRICE_PARTIA_PROC`(IN idPRodukt INT,IN id_pakowanie FLOAT, OUT nowa_cena FLOAT)
BEGIN
    SET nowa_cena = (SELECT cena_sztuka FROM produkt p1 WHERE p1.idProdukt = idProdukt) * (SELECT liczba_sztuk FROM pakowanie p2 WHERE p2.id_pakowanie = id_pakowanie);
end;
$$





INSERT INTO `mydb`.`dostawcy`(`nazwa_dostawcy`,`lokalizacja`, `surowiec`,`cena`,`odleglosc`)
VALUES
('Polskie uprawy','Port Lacymouth', 'Ziemniaki',3.40, 48),
('PolSol','New Brooklyn', 'Sól',2.59,131),
('ZiemniakPol','Los Santos', 'Ziemniaki', 3.10,79),
('Germany Oils','Broderickhaven', 'Olej', 11.35,51),
('Kamis','Alyceberg', 'Pieprz', 38.00,24),
('PasTp','West Tonybury', 'Inne Przyprawy',45.99,52),
('Front Flow','New Mellie', 'Aromaty',32.99,23),
('Aromator','Alyceberg', 'Aromaty',29.99,30);


INSERT INTO `mydb`.`surowce`(`nazwa`,`Surowce_id_dostawcy`,`ilosc`,`jednostka`)
VALUES
('Ziemniaki', 1,5400,'kilogram'),
('Sól',2,125,'kilogram'),
('Olej',4,1130,'litr'),
('Pieprz',5,110,'kilogram'),
('Aromaty',7,28,'kilogram'),
('Inne Przyprawy',6,42,'kilogram');


INSERT INTO `mydb`.`klienci` (`imie`, `nazwisko`, `nr_telefonu`, `miasto`, `adres`, `email`, `haslo`)
VALUES
('Deondre', 'Kassulke', '+17(1)0604939809', 'New Brooklyn', '841 Kariane Forks Suite 056', 'xbuckridge@example.org', 'dfbo'),
('Ursula', 'Kunze', '(457)512-8604', 'Torphyview', '178 Swaniawski Track', 'xander76@example.com', 'nqnp'),
('Dangelo', 'Cummings', '(591)470-1866', 'Port Lacymouth', '91713 Abbott Meadow', 'ullrich.irwin@example.com', 'pxrw'),
('Caterina', 'Kuhn', '(318)585-8316x4335', 'Tremblayborough', '2494 Hoyt Dam', 'gaylord.nichole@example.com', 'lltm'),
('Lue', 'Gaylord', '1-759-720-9875', 'Bechtelarbury', '388 Elsa Divide Apt. 575', 'lgorczany@example.com', 'mjmw'),
('Aaliyah', 'Zieme', '(212)456-0877x44349', 'Lake Kacieshire', '49710 Hand Trail Apt. 515', 'rhessel@example.net', 'dfcd'),
('Jennie', 'Schmitt', '1-849-494-1028x40218', 'Modestoview', '180 Patricia Prairie Apt. 534', 'raynor.ricardo@example.net', 'iwcs'),
('Jermain', 'Herman', '02213294211', 'Lake Doug', '972 Kilback Prairie Suite 252', 'danny98@example.net', 'psbh'),
('Else', 'Pollich', '297.273.6140x3529', 'Davischester', '628 Murphy Views', 'langworth.pierce@example.com', 'sita'),
('Will', 'Mosciski', '029-765-7144', 'Johnniestad', '4109 Lowell Valleys', 'wschmeler@example.net', 'tjzg'),
('Faye', 'Bechtelar', '251-030-9879', 'Gilbertstad', '327 Pasquale Stream', 'shields.amos@example.com', 'aqaw'),
('Meggie', 'Ebert', '(310)301-4679', 'Hermannborough', '48609 Kyler Bridge', 'hattie79@example.net', 'qntu'),
('Sandy', 'Rippin', '1-240-088-9149x209', 'South Xzavierland', '51138 Abbott Viaduct', 'koepp.cecelia@example.org', 'rqpi'),
('Brenna', 'Cole', '1-382-061-9629', 'North Mittie', '4884 Koepp Isle Apt. 417', 'demario.wuckert@example.com', 'ecny'),
('Heaven', 'Gleichner', '992.005.5389x596', 'New Nicklauschester', '522 Antonio Grove Suite 552', 'karelle47@example.com', 'mmph'),
('Cornell', 'Rempel', '707.848.4913x722', 'Lake Mohammadview', '71622 Kuvalis River Apt. 367', 'tleuschke@example.net', 'mndm'),
('Jed', 'Lowe', '(377)751-5043x9753', 'Lake Santos', '7103 Mireille Prairie Suite 990', 'leila.crooks@example.org', 'dmlj'),
('Jaleel', 'Schamberger', '109.811.6608x48141', 'Alyceberg', '3958 Nolan Falls Suite 661', 'enid85@example.org', 'whga'),
('Americo', 'Mraz', '1-354-077-7766', 'Broderickhaven', '327 Sedrick Isle', 'io\'reilly@example.com', 'tvdf'),
('Rosina', 'Dicki', '319-516-0878', 'New Mellie', '5763 Fabiola Row Suite 055', 'ibrakus@example.org', 'pbyv'),
('Myrtis', 'Miller', '281-586-4935x487', 'Watsicachester', '93344 Ubaldo Lodge', 'greenfelder.nels@example.net', 'vxne'),
('Queen', 'Shields', '281-701-0438', 'Flavioberg', '59668 Orin Rue Apt. 001', 'xkoepp@example.org', 'dpap'),
('Frederique', 'Hirthe', '(476)562-0508', 'Micheleside', '23007 Erdman Land Suite 865', 'lleffler@example.com', 'czia'),
('Gabe', 'Raynor', '(612)327-2429x486', 'Lake Helena', '1689 Korey Radial Suite 268', 'trantow.richmond@example.org', 'amgh'),
('Cloyd', 'Kemmer', '801.718.2524x957', 'Jastport', '63330 Samanta Plain Suite 750', 'uwunsch@example.com', 'tfdq'),
('Zula', 'Nolan', '(295)716-8786', 'West Tonybury', '80045 Bradley Trace Suite 774', 'fay.paucek@example.net', 'uwxn'),
('Gerardo', 'Purdy', '268-867-1010x0975', 'East Whitneychester', '08014 Bruen Rapids', 'zieme.aurelio@example.org', 'dsog'),
('Bobby', 'Abernathy', '05465666251', 'Ciaraton', '483 Madeline Forge Suite 111', 'roxane.schamberger@example.net', 'iaez');



INSERT INTO `mydb`.`pracownicy` (`imie`, `nazwisko`, `nr_telefonu`, `uprawnienia`, `pracownik`, `stawka`, `email`, `haslo`)
VALUES
('Maxime', 'Lehner', '136.367.7952x97984', 'Menadżer', 1, 100.0, 'wisoky.erika@example.net', 'we12xs'),
('Kelly', 'Altenwerth', '+99(8)7529387775', 'Kierownik', 1, 50.0, 'joy.schamberger@example.org', 'otbp8234'),
('Tyler', 'Grant', '036.458.2760', 'Kierownik', 1, 50.0,'spollich@example.org', 'lyag012'),
('Duane', 'Braun', '+38(2)5379236425', 'Kierownik', 1, 50.0, 'aadams@example.org', 'mbyo0321'),
('Kayli', 'Blanda', '150.001.1272x43295', 'Kierownik', 1, 50.0, 'reanna90@example.net', 'xqut4710'),
('Torey', 'Smitham', '(414)237-5345', 'Operator', 0, 20.0, 'lowe.myrtle@example.com', 'xf1oi31'),
('Theresia', 'Kris', '1-362-326-8669x561', 'Operator', 1, 27.0, 'thermann@example.com', 'gpzb340'),
('Lula', 'Legros', '1-206-259-1754x4604', 'Operator', 1, 25.0, 'einar19@example.net', 'lhja420'),
('Eric', 'Hagenes', '851.151.2307x2821', 'Operator', 0, 20.0, 'kozey.sven@example.net', 'pyon1111'),
('Dudley', 'Hartmann', '474.448.6210', 'Operator', 1, 27.0, 'rcummings@example.com', 'buzi324p'),
('Magnus', 'Prohaska', '+11(0)8001008390', 'Obsługa', 1, 20.0, 'whilll@example.org', 'gqvqnrou13'),
('Corene', 'Dicki', '(772)756-1075x439', 'Obsługa', 0, 20.0, 'schmidt.katelin@example.org', 'txkbhd12'),
('Romaine', 'Skiles', '687-989-8019', 'Obsługa', 1, 20.0, 'hardy.hayes@example.com', 'bcufe12e'),
('Johnpaul', 'Emmerich', '(508)610-5663x3350', 'Obsługa', 1, 20.0, 'xjohnston@example.net', 'vnbri3d0'),
('Jeramy', 'Lubowitz', '07202922425', 'Obsługa', 1, 20.0, 'block.eric@example.net', 'hgjrasd1'),
('Shyanne', 'Beer', '(624)450-1573x3545', 'Pakowanie', 1, 18.0, 'lexus.boyle@example.com', 'ayhr12310a'),
('Cloyd', 'Cronin', '(288)037-9535x85992', 'Pakowanie', 1, 18.0, 'bogan.terrance@example.org', 'katyjdna1'),
('Itzel', 'Friesen', '407.571.3375x821', 'Pakowanie', 1, 18.0,'henderson73@example.net', 'kelz19a-1'),
('Forrest', 'Prosacco', '760.447.2353x5029', 'Pakowanie', 0, 16.0, 'reichert.elisha@example.org', 'dzzddna1'),
('Savanah', 'Weber', '05407091501', 'Pakowanie', 0, 16.0, 'gretchen03@example.org', 'zwzmjnad1'),
('Ahmed', 'Zulauf', '(656)765-7447', 'Pakowanie', 1, 18.0, 'frida91@example.net', 'tecq0010'),
('Kasandra', 'Greenholt', '07265037507', 'Magazyn', 1, 17.0, 'unitzsche@example.com', 'jtoodaos'),
('Eliseo', 'Schmidt', '1-644-823-5901x30029', 'Magazyn', 1, 17.0, 'tspinka@example.net', 'ljhd3bja'),
('Hailie', 'Trantow', '235.904.0764x920', 'Magazyn', 0, 15.0, 'kareem.abshire@example.net', 'fypljd1'),
('Jimmie', 'Satterfield', '(148)743-5942', 'Magazyn', 1, 17.0, 'oberbrunner.tyree@example.net', 'ixcqnoi0'),
('Yessenia', 'Kuhn', '02815576687', 'Magazyn', 1, 17.0, 'keanu19@example.com', 'pxbvnainsd45');


INSERT INTO `mydb`.`etat` (`Pracownicy_id_pracownicy`,`liczba_godzin`)
VALUES
(1,12),
(2,37),
(3,28),
(4,39),
(5,10),
(6,49),
(7,50),
(8,36),
(9,25),
(10,21),
(11,23),
(12,31),
(13,42),
(14,12),
(15,40),
(16,20),
(17,28),
(18,31),
(19,12),
(20,34),
(21,45),
(22,20),
(23,22),
(24,31),
(25,32),
(26,25);



INSERT INTO `mydb`.`pakowanie` (`nazwa_pakietu`, `liczba_sztuk`)
VALUES
('Paleta',200),
('Duży karton',40),
('Mały karton',20);



INSERT INTO `mydb`.`produkt` (`nazwa_produktu`, `cena_sztuka`)
VALUES
('Zielona Cebulka Małe',2.99),
('Ostra Papryka Małe',2.99),
('Zielona Cebulka Duże',4.99),
('Ostra Papryka Duże',4.99),
('Grzybowe Małe',1.99),
('Grzybowe Duże',3.99),
('Żeberka z Grilla Duże',5.99),
('Żeberka z Grilla Małe',3.99),
('Fromage Duże',4.99),
('Fromage Małe',2.99);


INSERT INTO `mydb`.`partia` (`Produkt_idProdukt`, `Pakowanie_id_pakowanie`,`cena`,`stan`)
VALUES
(1,1,598,'niedostępna'),
(2,2,119.6,'dostępna'),
(3,3,99.8,'dostępna'),
(4,2,199.6,'dostępna'),
(5,3,39.8,'niedostępna'),
(6,1,798,'dostępna'),
(7,3,119.8,'niedostępna'),
(8,1,798,'niedostępna'),
(9,2,199.6,'dostępna'),
(10,2,119.6,'dostępna');


INSERT INTO `mydb`.`Zamowienia` (`Klienci_id_klienci`, `data_zamowienia`, `data_nadania`, `status`)
VALUES
(2,'2020-11-12','2020-11-13','dostarczono'),
(4,'2020-11-15',null,'przygotowane do nadania'),
(10,'2020-11-21','2020-11-23','dostarczono'),
(12,'2020-11-21','2020-11-28','dostarczono'),
(11,'2020-11-27',null,'przygotowane do nadania'),
(21,'2020-11-27','2020-11-29','dostarczono'),
(18,'2020-11-28',null,'przygotowane do nadania'),
(13,'2020-12-13','2020-12-14','nadane'),
(3,'2020-12-23','2020-12-25','dostarczono'),
(6,'2020-12-13','2020-12-16','nadane'),
(7,'2020-12-23','2020-12-24','nadane'),
(8,'2020-11-19','2020-11-20','dostarczono'),
(14,'2020-12-28','2020-12-30','nadane');

INSERT INTO `mydb`.`zyski` (`Zamowienia_idZamowienia`, `kwota`)
VALUES
(1,798),
(2,199.6),
(4,39.8),
(10,119.6),
(12,99.8),
(11,798),
(21,598),
(18,798),
(7,99.8),
(8,598);

INSERT INTO `mydb`.`PatrieJednegoZamowienia` (`Zamowienia_idZamowienia`, `Partia_id_partii`,`ilosc`)
VALUES
(2,2,3),
(2,3,2),
(2,1,2),
(2,4,1),
(4,5,1),
(4,6,2),
(8,7,1),
(8,3,2),
(12,5,1),
(12,6,1),
(12,7,2),
(12,2,2),
(14,1,3),
(14,10,1);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
